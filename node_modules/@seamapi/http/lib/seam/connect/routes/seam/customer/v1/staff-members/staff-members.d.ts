import type { RouteRequestBody, RouteResponse } from '@seamapi/types/connect';
import { type Client } from '../../../../../../../../lib/seam/connect/client.js';
import { type SeamHttpFromPublishableKeyOptions, type SeamHttpOptions, type SeamHttpOptionsWithApiKey, type SeamHttpOptionsWithClient, type SeamHttpOptionsWithClientSessionToken, type SeamHttpOptionsWithConsoleSessionToken, type SeamHttpOptionsWithPersonalAccessToken, type SeamHttpRequestOptions } from '../../../../../../../../lib/seam/connect/options.js';
import { SeamHttpRequest } from '../../../../../../../../lib/seam/connect/seam-http-request.js';
import { SeamPaginator } from '../../../../../../../../lib/seam/connect/seam-paginator.js';
import type { SetNonNullable } from '../../../../../../../../lib/types.js';
export declare class SeamHttpSeamCustomerV1StaffMembers {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    readonly ltsVersion = "1.0.0";
    static ltsVersion: string;
    constructor(apiKeyOrOptions?: string | SeamHttpOptions);
    static fromClient(client: SeamHttpOptionsWithClient['client'], options?: Omit<SeamHttpOptionsWithClient, 'client'>): SeamHttpSeamCustomerV1StaffMembers;
    static fromApiKey(apiKey: SeamHttpOptionsWithApiKey['apiKey'], options?: Omit<SeamHttpOptionsWithApiKey, 'apiKey'>): SeamHttpSeamCustomerV1StaffMembers;
    static fromClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'], options?: Omit<SeamHttpOptionsWithClientSessionToken, 'clientSessionToken'>): SeamHttpSeamCustomerV1StaffMembers;
    static fromPublishableKey(publishableKey: string, userIdentifierKey: string, options?: SeamHttpFromPublishableKeyOptions): Promise<SeamHttpSeamCustomerV1StaffMembers>;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'], workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'], options?: Omit<SeamHttpOptionsWithConsoleSessionToken, 'consoleSessionToken' | 'workspaceId'>): SeamHttpSeamCustomerV1StaffMembers;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'], workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'], options?: Omit<SeamHttpOptionsWithPersonalAccessToken, 'personalAccessToken' | 'workspaceId'>): SeamHttpSeamCustomerV1StaffMembers;
    createPaginator<const TResponse, const TResponseKey extends keyof TResponse>(request: SeamHttpRequest<TResponse, TResponseKey>): SeamPaginator<TResponse, TResponseKey>;
    updateClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken']): Promise<void>;
    get(parameters?: SeamCustomerV1StaffMembersGetParameters, options?: SeamCustomerV1StaffMembersGetOptions): SeamCustomerV1StaffMembersGetRequest;
    list(parameters?: SeamCustomerV1StaffMembersListParameters, options?: SeamCustomerV1StaffMembersListOptions): SeamCustomerV1StaffMembersListRequest;
}
export type SeamCustomerV1StaffMembersGetParameters = RouteRequestBody<'/seam/customer/v1/staff_members/get'>;
/**
 * @deprecated Use SeamCustomerV1StaffMembersGetParameters instead.
 */
export type SeamCustomerV1StaffMembersGetParams = SeamCustomerV1StaffMembersGetParameters;
/**
 * @deprecated Use SeamCustomerV1StaffMembersGetRequest instead.
 */
export type SeamCustomerV1StaffMembersGetResponse = SetNonNullable<Required<RouteResponse<'/seam/customer/v1/staff_members/get'>>>;
export type SeamCustomerV1StaffMembersGetRequest = SeamHttpRequest<SeamCustomerV1StaffMembersGetResponse, 'staff_member'>;
export interface SeamCustomerV1StaffMembersGetOptions {
}
export type SeamCustomerV1StaffMembersListParameters = RouteRequestBody<'/seam/customer/v1/staff_members/list'>;
/**
 * @deprecated Use SeamCustomerV1StaffMembersListParameters instead.
 */
export type SeamCustomerV1StaffMembersListParams = SeamCustomerV1StaffMembersListParameters;
/**
 * @deprecated Use SeamCustomerV1StaffMembersListRequest instead.
 */
export type SeamCustomerV1StaffMembersListResponse = SetNonNullable<Required<RouteResponse<'/seam/customer/v1/staff_members/list'>>>;
export type SeamCustomerV1StaffMembersListRequest = SeamHttpRequest<SeamCustomerV1StaffMembersListResponse, 'staff_members'>;
export interface SeamCustomerV1StaffMembersListOptions {
}
