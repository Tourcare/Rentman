import type { RouteRequestBody, RouteRequestParams, RouteResponse } from '@seamapi/types/connect';
import { type Client } from '../../../../../../../../lib/seam/connect/client.js';
import { type SeamHttpFromPublishableKeyOptions, type SeamHttpOptions, type SeamHttpOptionsWithApiKey, type SeamHttpOptionsWithClient, type SeamHttpOptionsWithClientSessionToken, type SeamHttpOptionsWithConsoleSessionToken, type SeamHttpOptionsWithPersonalAccessToken, type SeamHttpRequestOptions } from '../../../../../../../../lib/seam/connect/options.js';
import { SeamHttpRequest } from '../../../../../../../../lib/seam/connect/seam-http-request.js';
import { SeamPaginator } from '../../../../../../../../lib/seam/connect/seam-paginator.js';
import type { SetNonNullable } from '../../../../../../../../lib/types.js';
export declare class SeamHttpSeamCustomerV1Connectors {
    client: Client;
    readonly defaults: Required<SeamHttpRequestOptions>;
    readonly ltsVersion = "1.0.0";
    static ltsVersion: string;
    constructor(apiKeyOrOptions?: string | SeamHttpOptions);
    static fromClient(client: SeamHttpOptionsWithClient['client'], options?: Omit<SeamHttpOptionsWithClient, 'client'>): SeamHttpSeamCustomerV1Connectors;
    static fromApiKey(apiKey: SeamHttpOptionsWithApiKey['apiKey'], options?: Omit<SeamHttpOptionsWithApiKey, 'apiKey'>): SeamHttpSeamCustomerV1Connectors;
    static fromClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken'], options?: Omit<SeamHttpOptionsWithClientSessionToken, 'clientSessionToken'>): SeamHttpSeamCustomerV1Connectors;
    static fromPublishableKey(publishableKey: string, userIdentifierKey: string, options?: SeamHttpFromPublishableKeyOptions): Promise<SeamHttpSeamCustomerV1Connectors>;
    static fromConsoleSessionToken(consoleSessionToken: SeamHttpOptionsWithConsoleSessionToken['consoleSessionToken'], workspaceId: SeamHttpOptionsWithConsoleSessionToken['workspaceId'], options?: Omit<SeamHttpOptionsWithConsoleSessionToken, 'consoleSessionToken' | 'workspaceId'>): SeamHttpSeamCustomerV1Connectors;
    static fromPersonalAccessToken(personalAccessToken: SeamHttpOptionsWithPersonalAccessToken['personalAccessToken'], workspaceId: SeamHttpOptionsWithPersonalAccessToken['workspaceId'], options?: Omit<SeamHttpOptionsWithPersonalAccessToken, 'personalAccessToken' | 'workspaceId'>): SeamHttpSeamCustomerV1Connectors;
    createPaginator<const TResponse, const TResponseKey extends keyof TResponse>(request: SeamHttpRequest<TResponse, TResponseKey>): SeamPaginator<TResponse, TResponseKey>;
    updateClientSessionToken(clientSessionToken: SeamHttpOptionsWithClientSessionToken['clientSessionToken']): Promise<void>;
    create(parameters?: SeamCustomerV1ConnectorsCreateParameters, options?: SeamCustomerV1ConnectorsCreateOptions): SeamCustomerV1ConnectorsCreateRequest;
    delete(parameters?: SeamCustomerV1ConnectorsDeleteParameters, options?: SeamCustomerV1ConnectorsDeleteOptions): SeamCustomerV1ConnectorsDeleteRequest;
    list(parameters?: SeamCustomerV1ConnectorsListParameters, options?: SeamCustomerV1ConnectorsListOptions): SeamCustomerV1ConnectorsListRequest;
    sync(parameters?: SeamCustomerV1ConnectorsSyncParameters, options?: SeamCustomerV1ConnectorsSyncOptions): SeamCustomerV1ConnectorsSyncRequest;
    update(parameters?: SeamCustomerV1ConnectorsUpdateParameters, options?: SeamCustomerV1ConnectorsUpdateOptions): SeamCustomerV1ConnectorsUpdateRequest;
}
export type SeamCustomerV1ConnectorsCreateParameters = RouteRequestBody<'/seam/customer/v1/connectors/create'>;
/**
 * @deprecated Use SeamCustomerV1ConnectorsCreateParameters instead.
 */
export type SeamCustomerV1ConnectorsCreateBody = SeamCustomerV1ConnectorsCreateParameters;
/**
 * @deprecated Use SeamCustomerV1ConnectorsCreateRequest instead.
 */
export type SeamCustomerV1ConnectorsCreateResponse = SetNonNullable<Required<RouteResponse<'/seam/customer/v1/connectors/create'>>>;
export type SeamCustomerV1ConnectorsCreateRequest = SeamHttpRequest<SeamCustomerV1ConnectorsCreateResponse, 'connector'>;
export interface SeamCustomerV1ConnectorsCreateOptions {
}
export type SeamCustomerV1ConnectorsDeleteParameters = RouteRequestBody<'/seam/customer/v1/connectors/delete'>;
/**
 * @deprecated Use SeamCustomerV1ConnectorsDeleteParameters instead.
 */
export type SeamCustomerV1ConnectorsDeleteBody = SeamCustomerV1ConnectorsDeleteParameters;
/**
 * @deprecated Use SeamCustomerV1ConnectorsDeleteRequest instead.
 */
export type SeamCustomerV1ConnectorsDeleteResponse = SetNonNullable<Required<RouteResponse<'/seam/customer/v1/connectors/delete'>>>;
export type SeamCustomerV1ConnectorsDeleteRequest = SeamHttpRequest<SeamCustomerV1ConnectorsDeleteResponse, 'connector'>;
export interface SeamCustomerV1ConnectorsDeleteOptions {
}
export type SeamCustomerV1ConnectorsListParameters = RouteRequestParams<'/seam/customer/v1/connectors/list'>;
/**
 * @deprecated Use SeamCustomerV1ConnectorsListParameters instead.
 */
export type SeamCustomerV1ConnectorsListParams = SeamCustomerV1ConnectorsListParameters;
/**
 * @deprecated Use SeamCustomerV1ConnectorsListRequest instead.
 */
export type SeamCustomerV1ConnectorsListResponse = SetNonNullable<Required<RouteResponse<'/seam/customer/v1/connectors/list'>>>;
export type SeamCustomerV1ConnectorsListRequest = SeamHttpRequest<SeamCustomerV1ConnectorsListResponse, 'connectors'>;
export interface SeamCustomerV1ConnectorsListOptions {
}
export type SeamCustomerV1ConnectorsSyncParameters = RouteRequestBody<'/seam/customer/v1/connectors/sync'>;
/**
 * @deprecated Use SeamCustomerV1ConnectorsSyncParameters instead.
 */
export type SeamCustomerV1ConnectorsSyncBody = SeamCustomerV1ConnectorsSyncParameters;
/**
 * @deprecated Use SeamCustomerV1ConnectorsSyncRequest instead.
 */
export type SeamCustomerV1ConnectorsSyncResponse = SetNonNullable<Required<RouteResponse<'/seam/customer/v1/connectors/sync'>>>;
export type SeamCustomerV1ConnectorsSyncRequest = SeamHttpRequest<SeamCustomerV1ConnectorsSyncResponse, 'connector_sync'>;
export interface SeamCustomerV1ConnectorsSyncOptions {
}
export type SeamCustomerV1ConnectorsUpdateParameters = RouteRequestBody<'/seam/customer/v1/connectors/update'>;
/**
 * @deprecated Use SeamCustomerV1ConnectorsUpdateParameters instead.
 */
export type SeamCustomerV1ConnectorsUpdateBody = SeamCustomerV1ConnectorsUpdateParameters;
/**
 * @deprecated Use SeamCustomerV1ConnectorsUpdateRequest instead.
 */
export type SeamCustomerV1ConnectorsUpdateResponse = SetNonNullable<Required<RouteResponse<'/seam/customer/v1/connectors/update'>>>;
export type SeamCustomerV1ConnectorsUpdateRequest = SeamHttpRequest<SeamCustomerV1ConnectorsUpdateResponse, 'connector'>;
export interface SeamCustomerV1ConnectorsUpdateOptions {
}
